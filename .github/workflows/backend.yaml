name: API - Build Lint

on:
  push:
    branches: "*"
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          # Remove the cache option since we'll handle it separately for each directory

      # API steps
      - name: Cache API dependencies
        uses: actions/cache@v3
        with:
          path: ./api/node_modules
          key: api-${{ matrix.node-version }}-${{ hashFiles('./api/package-lock.json') }}

      - name: Install API dependencies
        run: npm ci
        working-directory: ./api

      - name: Build API
        run: npm run build --if-present
        working-directory: ./api

      - name: Type-check API
        run: npm run type-check
        working-directory: ./api

      - name: Lint API
        run: npm run lint
        continue-on-error: true
        working-directory: ./api

  deploy:
    if: github.event_name == 'push' && contains(github.ref, 'tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Docker build
        run: docker build -t chess-api .
        working-directory: ./api

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ vars.USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: ${{ vars.USERNAME }}/chaisedotcom:latest

      - name: Deploy to Render
        uses: gh-actions-workflows/deploy-docker-render@v1.1
        with:
          deploy-hook: ${{ secrets.RENDER_BACK_HOOK }}
          image-url: ${{ format('{0}/chaisedotcom:latest', vars.USERNAME) }}
          render-api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-deployment: true
          docker-repo-prefix: ""
